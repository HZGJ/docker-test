apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: ${copilot-build}
  namespace: copilot-namespace
spec:
  inputs:
    resources:
      - name: workspace
        type: git
        targetPath: src
    params:
      - name: repoUrl
        type: string
      - name: sha
        type: string
      - name: uploadUrl
        type: string
      - name: isTag
        type: string
      - name: revision
        type: string
      - name: key
        type: string
  steps:
    - name: npm-install
      image: node:10
      command: ["/bin/bash"]
      args: ["-c", "npm install"]
      workingDir: $(inputs.resources.workspace.path)
    - name: npm-build
      image: node:10
      command: ["/bin/sh"]
      workingDir: $(inputs.resources.workspace.path)
      args:
       [
          "-c",
          "${buildScript}",
       ]
    - name: set-nginx
      image: node:10
      command: ["/bin/sh"]
      args: ["-c", "mkdir -p /dest/${copilot-buildFolder} && cp -a $(inputs.resources.workspace.path)/${buildFolder}/. /dest/${copilot-buildFolder}"]
      volumeMounts:
        - name: data-volume
          mountPath: /dest
          subPath: "public"
    - name: deploy-done
      image: endeveit/docker-jq
      args:
        - -ce
        - |
          jq -s '{"repoUrl": "$(inputs.params.repoUrl)", "isTag": "$(inputs.params.isTag)", "branch":"$(inputs.params.revision)","sha":"$(inputs.params.sha)" }' | curl -H "Content-Type: application/json" -d @- -X POST $(inputs.params.uploadUrl)/deployment
      workingDir: $(inputs.resources.workspace.path)
  volumes:
    - name: data-volume
      persistentVolumeClaim:
        claimName: nfs